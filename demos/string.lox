class IteratorResult {
  init(value, done) {
    this.value = value;
    this.done = done;
  }
}

class ListNode {
  init(value) {
    this.value = value;
    this.next = nil;
    this.previous = nil;
  }
}

class List {
  init() {
    this.head = nil;
    this.tail = nil;
    this._length = 0;
  }

  push(value) {
    var node = ListNode(value);
    if (this.head == nil) {
      this.head = node;
      this.tail = node;
    } else {
      node.previous = this.tail;
      this.tail.next = node;
      this.tail = node;
    }

    this._length = this._length + 1;

    return this;
  }

  nth(n) {
    if (n >= this._length) return nil;

    var node = this.head;

    for (var i = 0; i < n; i = i + 1) {
        node = node.next;
    }

    return node.value;
  }

  length() {
    return this._length;
  }

  iter() {
    var node = this.head;

      fun next() {
          if (node == nil) {
              return IteratorResult(nil, true);
          }

          var val = node.value;
          node = node.next;
          
          return IteratorResult(val, false);
      }

      return next;
  }

  forEach(fn) {
    var next = this.iter();
    for (var elem = next(); !elem.done; elem = next()) {
      fn(elem.value);
    }
  }

  map(fn) {
    var new_list = List();

    this.forEach(fun (val) {
      new_list.push(fn(val));
    });

    return new_list;
  }

  reduce(fn, start) {
    var prev = start;

    this.forEach(fun (val) {
      prev = fn(prev, val);
    });

    return prev;
  }

  join(separator) {
    var first = true;
    return this.reduce(fun (prev, curr) {
      if (first) {
        first = false;
        return curr;
      }

      return prev + separator + curr;
    }, "");
  }
}

var char_codes = List()
                    .push("a")
                    .push("b")
                    .push("c")
                    .push("d")
                    .push("e")
                    .push("f")
                    .push("g")
                    .push("h")
                    .push("i")
                    .push("j")
                    .push("k")
                    .push("l")
                    .push("m")
                    .push("n")
                    .push("o")
                    .push("p")
                    .push("q")
                    .push("r")
                    .push("s")
                    .push("t")
                    .push("u")
                    .push("v")
                    .push("w")
                    .push("x")
                    .push("y")
                    .push("z");

class String < List {

    addChar(code) {
        if (code < 0 or code > 25) return;
        this.push(code);
        return this;
    }

    charCodeAt(idx) {
        return this.nth(idx);
    }

    charAt(idx) {
        return char_codes.nth(this.nth(idx));
    }

    str() {
        return this.chars.map(fun(code)Â {
            return char_codes.nth(code);
        }).join("");
    }
}

var me = String().addChar(13).addChar(0).addChar(19).addChar(7).addChar(0).addChar(13);

print me.charAt(4);